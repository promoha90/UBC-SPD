(require 2htdp/image)

;; boxify-starter.rkt

; 
; PROBLEM:
; 
; Use the How to Design Functions (HtDF) recipe to design a function that consumes an image, 
; and appears to put a box around it. Note that you can do this by creating an "outline" 
; rectangle that is bigger than the image, and then using overlay to put it on top of the image. 
; For example:
; 
; (boxify (ellipse 60 30 "solid" "red")) should produce .
; 
; Remember, when we say DESIGN, we mean follow the recipe.
; 
; Leave behind commented out versions of the stub and template.
; 

;; Image -> Image
;; Produces the given image inside a box.
;; Test cases
(check-expect (boxify (ellipse 60 30 "solid" "red"))
              (overlay
               (rectangle (+ (image-width (ellipse 60 30 "solid" "red")) 2)
                          (+ (image-height (ellipse 60 30 "solid" "red")) 2) "outline" "black")
               (ellipse 60 30 "solid" "red")))

(check-expect (boxify (ellipse 0 0 "solid" "red"))
              (overlay
               (rectangle (+ (image-width (ellipse 0 0 "solid" "red")) 2)
                          (+ (image-height (ellipse 0 0 "solid" "red")) 2) "outline" "black")
               (ellipse 0 0 "solid" "red")))

; (define (boxify img) img)  ; stub

#| (define (boxify img)      ; template
     (... img)|#

(define (boxify img)
  (overlay (rectangle (+ (image-width img) 2) (+ (image-height img) 2) "outline" "black") img))
(boxify (ellipse 60 30 "solid" "red"))